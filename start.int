import sys
import os
import subprocess

from configparser import ConfigParser
config = ConfigParser()

from PySide6.QtWidgets import (QWidget, QApplication)
from Ui_Tree_This_Folder import Ui_Tree_This_Folder

main_path = "C:\\Program Files\\Tree This Folder"
config_file_path = os.path.join(main_path, "config.ini")
treeignore_file_path = os.path.join(main_path, ".treeignore")


if getattr(sys, 'frozen', None):
    basedir = sys._MEIPASS
else:
    basedir = os.path.dirname(__file__)

def run_as_admin(command):
    "需要vac"
    subprocess.run(["powershell", "Start-Process", command, "-Verb", "RunAs"], shell=True)

def fun1():
    run_as_admin(basedir + "\\复制文件夹结构\\add_treejustcopy.bat")

def fun2():
    run_as_admin(basedir + "\\生成文件夹结构\\add_treegenerate.bat")

def fun3():
    run_as_admin(basedir + "\\复制文件夹结构\\remove_treejustcopy.bat")

def fun4():
    run_as_admin(basedir + "\\生成文件夹结构\\remove_treegenerate.bat")

def read_level_limit():
    if os.path.exists(config_file_path):
        global level_limit
        config.read(config_file_path)
        level_limit = int(config['DEFAULT']['level_limit'])

def save_level_limit(value):
    global level_limit
    level_limit = value

def set_level_limit(value):
    global level_limit
    config['DEFAULT']['level_limit'] = str(level_limit)
    with open(config_file_path, 'w') as configfile:
        config.write(configfile)
    config.read(config_file_path, encoding='utf-8')
    print('确定设置探索层级深度：', config['DEFAULT']['level_limit'])

def edit_treeignore():
    print('编辑排除项')
    os.system("notepad.exe " + treeignore_file_path)

def open_github():
    print('打开GitHub')
    os.system("start https://github.com/H1DDENADM1N/Tree_This_Folder")
class Tree_This_Folder(QWidget, Ui_Tree_This_Folder):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton_1.clicked.connect(fun1)
        self.pushButton_2.clicked.connect(fun2)
        self.pushButton_3.clicked.connect(fun3)
        self.pushButton_4.clicked.connect(fun4)
        read_level_limit()
        self.spinBox.setValue(level_limit)
        self.spinBox.valueChanged.connect(save_level_limit)
        self.pushButton_5.clicked.connect(set_level_limit)
        self.pushButton_6.clicked.connect(edit_treeignore)
        self.pushButton_7.clicked.connect(open_github)


def main():
    global level_limit
    level_limit = 20
    app = QApplication([])
    w = Tree_This_Folder()
    w.show()
    sys.exit(app.exec())


if __name__ == '__main__':
    main()